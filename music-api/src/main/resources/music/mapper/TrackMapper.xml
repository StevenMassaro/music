<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="music.mapper.TrackMapper">

    <select id="list" resultMap="trackResultMap">
        <include refid="selectColumns"/>
        WHERE deletedInd != true
        <include refid="selectGroupBy"/>
        ORDER BY artist,album,discnumber,tracknumber
    </select>

    <select id="listAll" resultMap="trackResultMap">
        <include refid="selectColumns"/>
        <include refid="selectGroupBy"/>
        ORDER BY artist,album,discnumber,tracknumber
    </select>

    <sql id="selectColumns">
        SELECT
        t.id
        , t.title
        , t."location"
        , t.hash
        , t.album
        , t.artist
        , t.albumartist
        , t.genre
        , t."year"
        , t.discnumber
        , t.tracknumber
        , t."comment"
        , t.deletedind
        , t.datecreated
        , t.dateupdated
        , t.filelastmodifieddate
        , COUNT(p.playdate) + COALESCE(pc.playcount, 0) - (SELECT COUNT(*) FROM music.plays WHERE songid = t.id AND imported = true) AS plays
        FROM music.track t
        LEFT OUTER JOIN music.plays p
        ON p.songid = t.id
        LEFT OUTER JOIN music.playcount pc
        ON pc.songid = t.id
    </sql>

    <sql id="selectGroupBy">
        GROUP BY
        t.id
        , t.title
        , t."location"
        , t.hash
        , t.album
        , t.artist
        , t.albumartist
        , t.genre
        , t."year"
        , t.discnumber
        , t.tracknumber
        , t."comment"
        , t.deletedind
        , t.datecreated
        , t.dateupdated
        , t.filelastmodifieddate
        , pc.playcount
    </sql>

    <select id="get" resultMap="trackResultMap">
        <include refid="selectColumns"/>
        WHERE t.id = #{id}
        <include refid="selectGroupBy"/>
    </select>

    <select id="getByLocation" resultMap="trackResultMap">
        <include refid="selectColumns"/>
        WHERE t.location = #{location}
        <include refid="selectGroupBy"/>
    </select>

    <delete id="deleteById">
        DELETE FROM music.track WHERE t.id = #{id}
    </delete>

    <update id="markDeletedById">
        UPDATE music.track SET deletedInd = #{deletedInd} WHERE id = #{id}
    </update>

    <resultMap id="trackResultMap" type="music.model.Track">
        <id property="id" column="id"/>
        <!--<result property=""-->
        <!---->
        <!---->
        <!--<result property="hostname" column="hostname"/>-->
        <!--<result property="port" column="port"/>-->
        <!--<result property="authentication" column="authentication"/>-->
        <!--<result property="inboxName" column="inboxname"/>-->
        <!--<result property="username" column="username"/>-->
        <!--<result property="password" column="password"/>-->
        <!--<result property="dateCreated" column="dateCreated"/>-->
    </resultMap>

    <insert id="insert">
        INSERT INTO music.track (title, location, hash, album, artist, albumartist, genre, "year", discnumber, tracknumber, comment, deletedInd, fileLastModifiedDate)
        VALUES(#{track.title}, #{track.location}, #{track.hash}, #{track.album}, #{track.artist}, #{track.albumArtist},
        #{track.genre}, #{track.year}, #{track.discNumber}, #{track.trackNumber}, #{track.comment}, #{track.deletedInd}, #{track.fileLastModifiedDate})
    </insert>

    <update id="updateByLocation">
        UPDATE music.track
        SET
        title = #{track.title},
        hash = #{track.hash},
        album = #{track.album},
        artist = #{track.artist},
        albumartist = #{track.albumArtist},
        genre = #{track.genre},
        "year" = #{track.year},
        discnumber = #{track.discNumber},
        tracknumber = #{track.trackNumber},
        comment = #{track.comment},
        fileLastModifiedDate = #{track.fileLastModifiedDate}
        WHERE location = #{track.location}
    </update>
</mapper>
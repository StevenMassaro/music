<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="music.mapper.TrackMapper">

    <select id="list" resultMap="trackResultMap">
		<include refid="listSql"></include>
    </select>

    <select id="listAll" resultMap="trackResultMap">
        <include refid="selectColumns"/>
        <include refid="selectGroupBy"/>
        ORDER BY artist,album,disc_no,track
    </select>

	<select id="listWithSmartPlaylist" resultMap="trackResultMap">
		SELECT * FROM (<include refid="listSql"></include>) as tracks
		WHERE ${dynamicSql}
	</select>

	<sql id="listSql">
		<include refid="selectColumns"/>
		WHERE deletedInd != true
		<include refid="selectGroupBy"/>
		ORDER BY artist,album,disc_no,track
	</sql>

	<select id="countPurgableTracks" resultType="long">
		SELECT COUNT(*)
		<include refid="selectJoin"></include>
		WHERE deletedInd = true
	</select>

	<select id="listPlaysByDate" resultMap="trackResultMap">
		<include refid="selectColumns"/>
		WHERE date_trunc('day', p.playdate) = #{date}
		<include refid="selectGroupBy"/>
		, p.playdate
		ORDER BY p.playdate DESC
	</select>

	<select id="listByAlbum" resultMap="trackResultMap">
		<include refid="selectColumns"/>
		WHERE t.album = #{album}
		AND t.artist = #{artist}
		<if test="disc == null">
			AND t.disc_no IS NULL
		</if>
		<if test="disc != null">
			AND t.disc_no = #{disc}
		</if>
		<include refid="selectGroupBy"/>
	</select>

	<select id="listHistoricalDates" resultType="java.util.Date">
		SELECT DISTINCT
		date_trunc('day', p.playdate) AS playdategroup
		FROM music.plays p
		ORDER BY playdategroup DESC
	</select>

    <sql id="selectColumns">
        SELECT
        t.id
        , t.title
        , t."location"
        , t.hash
        , t.album
        , t.artist
        , t.album_artist
        , t.genre
        , t."year"
        , t.disc_no
        , t.track
        , t.rating
        , t."comment"
        , t.deletedind
        , t.bitrate
        , t.encoding
        , t.sampleRate
        , t.duration
        , t.datecreated
        , t.dateupdated
        , t.filelastmodifieddate
        , COUNT(p.playdate) + COALESCE(pc.playcount, 0) - (SELECT COUNT(*) FROM music.plays WHERE songid = t.id AND imported = true) AS plays
        <include refid="selectJoin"></include>
    </sql>

	<sql id="selectJoin">
		FROM music.track t
        LEFT OUTER JOIN music.plays p
        ON p.songid = t.id
        LEFT OUTER JOIN music.playcount pc
        ON pc.songid = t.id
	</sql>

    <sql id="selectGroupBy">
        GROUP BY
        t.id
        , t.title
        , t."location"
        , t.hash
        , t.album
        , t.artist
        , t.album_artist
        , t.genre
        , t."year"
        , t.disc_no
        , t.track
        , t.rating
        , t."comment"
        , t.deletedind
        , t.bitrate
        , t.encoding
        , t.sampleRate
        , t.duration
        , t.datecreated
        , t.dateupdated
        , t.filelastmodifieddate
        , pc.playcount
    </sql>

    <select id="get" resultMap="trackResultMap">
        <include refid="selectColumns"/>
        WHERE t.id = #{id}
        <include refid="selectGroupBy"/>
    </select>

    <select id="getByLocation" resultMap="trackResultMap">
        <include refid="selectColumns"/>
        WHERE t.location = #{location}
        <include refid="selectGroupBy"/>
    </select>

	<select id="getByTitleArtistAlbum" resultMap="trackResultMap">
		<include refid="selectColumns"/>
		WHERE t.title = #{title} AND
		t.album = #{album} AND
		t.artist = #{artist}
		<include refid="selectGroupBy"/>
	</select>

    <delete id="deleteById">
        DELETE FROM music.track t WHERE t.id = #{id}
    </delete>

    <update id="markDeletedById">
        UPDATE music.track SET deletedInd = #{deletedInd} WHERE id = #{id}
    </update>

    <resultMap id="trackResultMap" type="music.model.Track">
        <id property="id" column="id"/>
    </resultMap>

    <insert id="insert">
        INSERT INTO music.track (title, location, hash, album, artist, album_artist, genre, "year", disc_no, track,
        rating, comment, deletedInd, bitrate, encoding, sampleRate, duration, fileLastModifiedDate)
        VALUES(#{track.title}, #{track.location}, #{track.hash}, #{track.album}, #{track.artist}, #{track.album_artist},
        #{track.genre}, #{track.year}, #{track.disc_no}, #{track.track}, #{track.rating}, #{track.comment}, #{track.deletedInd},
        #{track.bitrate}, #{track.encoding}, #{track.sampleRate}, #{track.duration}, #{track.fileLastModifiedDate})
    </insert>

    <update id="updateByLocation">
        UPDATE music.track
        SET
        title = #{track.title},
        hash = #{track.hash},
        album = #{track.album},
        artist = #{track.artist},
        album_artist = #{track.album_artist},
        genre = #{track.genre},
        "year" = #{track.year},
        disc_no = #{track.disc_no},
        track = #{track.track},
        comment = #{track.comment},
        bitrate = #{track.bitrate},
        encoding = #{track.encoding},
        sampleRate = #{track.sampleRate},
        duration = #{track.duration},
        fileLastModifiedDate = #{track.fileLastModifiedDate},
        dateUpdated = #{track.dateUpdated}
        WHERE location = #{track.location}
    </update>

    <update id="setRatingById">
        UPDATE music.track
        SET rating = #{rating}
        WHERE id = #{id}
    </update>

	<update id="updateFieldById">
		UPDATE music.track
		SET ${field} = CAST(#{newValue} AS ${type})
		WHERE id = #{id}
	</update>
</mapper>

<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="music.mapper.TrackMapper">

    <select id="list" resultMap="trackResultMap">
		<include refid="listSql"></include>
    </select>

    <select id="listByLibraryId" resultMap="trackResultMap">
		SELECT * FROM (<include refid="selectColumns"/>) t
		WHERE t.deletedInd != true
		<if test="libraryId != null">
			AND t.libraryId = #{libraryId}
		</if>
		ORDER BY t.artist, t.album, t.disc_no, t.track
    </select>

    <select id="listDeleted" resultMap="trackResultMap">
        SELECT * FROM (<include refid="selectColumns"/>) t
		WHERE t.deletedInd = true
        ORDER BY t.artist, t.album, t.disc_no, t.track
    </select>

    <select id="listDeletedByLibraryId" resultMap="trackResultMap">
        SELECT * FROM (<include refid="selectColumns"/>) t
		WHERE t.deletedInd = true
		<if test="libraryId != null">
			AND t.libraryId = #{libraryId}
		</if>
        ORDER BY t.artist, t.album, t.disc_no, t.track
    </select>

	<select id="listWithSmartPlaylist" resultMap="trackResultMap">
		SELECT * FROM (<include refid="listSql"></include>) as tracks
		WHERE ${dynamicSql}
	</select>

	<select id="listWithPlaylist" resultMap="trackResultMap">
		SELECT tracks.* FROM (<include refid="listSql"></include>) AS tracks
		INNER JOIN music.playlisttrack pt ON pt.trackid = tracks.trackId
		WHERE tracks.trackId IN (SELECT trackId FROM music.playlisttrack pt WHERE pt.playlistId = #{playlistId})
		ORDER BY pt.sequenceid
	</select>

	<sql id="listSql">
		SELECT * FROM (<include refid="selectColumns"/>) t
		WHERE t.deletedInd != true
		ORDER BY t.artist, t.album, t.disc_no, t.track
	</sql>

	<select id="countPurgableTracks" resultType="long">
		SELECT COUNT(*)
		<include refid="selectJoin"></include>
		WHERE deletedInd = true
	</select>

	<select id="listPurgableTracks" resultMap="trackResultMap">
		<include refid="selectColumns"/>
		WHERE deletedInd = true
	</select>

	<select id="listPlaysByDate" resultMap="trackResultMap">
		<include refid="selectColumns"/>
		LEFT OUTER JOIN music.plays p
		ON p.songid = t.id
		WHERE date_trunc('day', p.playdate) = #{date}
		ORDER BY p.playdate DESC
	</select>

	<select id="listByAlbum" resultMap="trackResultMap">
		SELECT * FROM (<include refid="selectColumns"/>) t
		WHERE t.album = #{album}
		AND t.artist = #{artist}
		<if test="disc == null">
			AND t.disc_no IS NULL
		</if>
		<if test="disc != null">
			AND t.disc_no = #{disc}
		</if>
	</select>

	<select id="listHistoricalDates" resultType="java.util.Date">
		SELECT DISTINCT
		date_trunc('day', p.playdate) AS playdategroup
		FROM music.plays p
		ORDER BY playdategroup DESC
	</select>

    <sql id="selectColumns">
        SELECT
		t.id as trackId
		, COALESCE(tu_title.newvalue, t.title) AS title
        , t."location"
        , t.hash
        , COALESCE(tu_album.newvalue, t.album) AS album
        , COALESCE(tu_artist.newvalue, t.artist) AS artist
        , COALESCE(tu_album_artist.newvalue, t.album_artist) AS album_artist
        , COALESCE(tu_genre.newvalue, t.genre) AS genre
        , COALESCE(tu_year.newvalue, t."year") AS "year"
        , COALESCE(CAST(tu_disc_no.newvalue AS int), t.disc_no) AS disc_no
        , COALESCE(CAST(tu_track.newvalue AS int), t.track) AS track
        , t.rating
        , COALESCE(tu_comment.newvalue, t."comment") AS "comment"
        , t.deletedind
        , t.bitrate
        , t.encoding
        , t.sampleRate
        , t.duration
        , t.datecreated
        , t.dateupdated
        , t.filelastmodifieddate
		, t.albumArtSource
		, t.albumArtDateUpdated
    	, (
			SELECT max(p.playdate)
			FROM music.plays p
			WHERE p.songid = t.id
		) AS lastplayeddate
		, l.id as libraryId
		, l.name as libraryName
		, l.subfolder as librarySubFolder
		, l.trackNamePattern as trackNamePattern
		,
		(
		    SELECT Count(p.playdate)
				   + COALESCE(pc.playcount, 0) - (SELECT Count(*)
												  FROM   music.plays
												  WHERE  songid = t.id
														 AND imported = true)
			FROM   music.plays p
				   LEFT OUTER JOIN music.playcount pc
								ON pc.songid = t.id
			WHERE  p.songid = t.id
			GROUP  BY pc.playcount
		) AS plays,
       (
           SELECT Count(s.skipdate)
				   + COALESCE(sc.skipcount, 0) - (SELECT Count(*)
												  FROM   music.skips
												  WHERE  songid = t.id
														 AND imported = true)
			FROM   music.skips s
				   LEFT OUTER JOIN music.skipcount sc
								ON sc.songid = t.id
			WHERE  s.songid = t.id
			GROUP  BY sc.skipcount
	   ) AS skips
		<include refid="selectJoin"></include>
    </sql>

	<sql id="selectJoin">
		FROM music.track t
		INNER JOIN music.library l ON t.libraryId = l.id
		LEFT OUTER JOIN music.trackupdates tu_title ON t.id = tu_title.songid AND tu_title.field = 'title'
		LEFT OUTER JOIN music.trackupdates tu_album ON t.id = tu_album.songid AND tu_album.field = 'album'
		LEFT OUTER JOIN music.trackupdates tu_artist ON t.id = tu_artist.songid AND tu_artist.field = 'artist'
		LEFT OUTER JOIN music.trackupdates tu_album_artist ON t.id = tu_album_artist.songid AND tu_album_artist.field = 'album_artist'
		LEFT OUTER JOIN music.trackupdates tu_genre ON t.id = tu_genre.songid AND tu_genre.field = 'genre'
		LEFT OUTER JOIN music.trackupdates tu_year ON t.id = tu_year.songid AND tu_year.field = 'year'
		LEFT OUTER JOIN music.trackupdates tu_disc_no ON t.id = tu_disc_no.songid AND tu_disc_no.field = 'disc_no'
		LEFT OUTER JOIN music.trackupdates tu_track ON t.id = tu_track.songid AND tu_track.field = 'track'
		LEFT OUTER JOIN music.trackupdates tu_comment ON t.id = tu_comment.songid AND tu_comment.field = 'comment'
	</sql>

    <select id="get" resultMap="trackResultMap">
        <include refid="selectColumns"/>
        WHERE t.id = #{id}
    </select>

    <select id="getByLocationAndLibrary" resultMap="trackResultMap">
        <include refid="selectColumns"/>
        WHERE trim(t.location) = #{location} AND t.libraryId = #{libraryId}
    </select>

	<select id="getByTitleArtistAlbum" resultMap="trackResultMap">
		<include refid="selectColumns"/>
		WHERE t.title = #{title} AND
		t.album = #{album} AND
		t.artist = #{artist}
	</select>

    <delete id="deleteById">
        DELETE FROM music.track t WHERE t.id = #{id}
    </delete>

    <update id="markDeletedById">
        UPDATE music.track SET deletedInd = #{deletedInd} WHERE id = #{id}
    </update>

    <resultMap id="trackResultMap" type="music.model.Track" autoMapping="true">
		<id property="id" column="trackId"/>
		<association property="library" resultMap="libraryResultMap"/>
    </resultMap>

	<resultMap id="libraryResultMap" type="music.model.Library">
		<id property="id" column="libraryId" javaType="_long"/>
		<result property="subfolder" column="librarySubFolder" javaType="String"/>
		<result property="name" column="libraryName" javaType="String"/>
		<result property="trackNamePattern" column="trackNamePattern" javaType="String"/>
	</resultMap>

    <insert id="insert" useGeneratedKeys="true" keyProperty="track.id" keyColumn="id">
        INSERT INTO music.track (title, location, hash, album, artist, album_artist, genre, "year", disc_no, track,
        rating, comment, deletedInd, bitrate, encoding, sampleRate, duration, fileLastModifiedDate, libraryId)
        VALUES(#{track.title}, #{track.location}, #{track.hash}, #{track.album}, #{track.artist}, #{track.album_artist},
        #{track.genre}, #{track.year}, #{track.disc_no}, #{track.track}, #{track.rating}, #{track.comment}, #{track.deletedInd},
        #{track.bitrate}, #{track.encoding}, #{track.sampleRate}, #{track.duration}, #{track.fileLastModifiedDate}, #{track.library.id})
    </insert>

    <update id="update">
        UPDATE music.track
        SET
        title = #{track.title},
        hash = #{track.hash},
        album = #{track.album},
        artist = #{track.artist},
        album_artist = #{track.album_artist},
        genre = #{track.genre},
        "year" = #{track.year},
        disc_no = #{track.disc_no},
        track = #{track.track},
        comment = #{track.comment},
        bitrate = #{track.bitrate},
        encoding = #{track.encoding},
        sampleRate = #{track.sampleRate},
        duration = #{track.duration},
        fileLastModifiedDate = #{track.fileLastModifiedDate},
        dateUpdated = #{track.dateUpdated},
		albumArtSource = #{track.albumArtSource},
		albumArtDateUpdated = #{track.albumArtDateUpdated},
		rating = #{track.rating},
		deletedInd = #{track.deletedInd},
		location = #{track.location},
        libraryId = #{track.library.id}
        WHERE id = #{track.id}
    </update>

    <update id="setRatingById">
        UPDATE music.track
        SET rating = #{rating}
        WHERE id = #{id}
    </update>
</mapper>
